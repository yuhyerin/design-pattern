1. 프록시 패턴?
- proxy(대리인) 이라는 의미.
- 기존 객체를 대신해서 수행한다.
- 프록시 패턴에서 중요한 것은 흐름제어만 할 뿐, 결과값을 조작하거나 변경시키면 안된다.

2. 구조
- 공통 인터페이스를 두고, 원본 객체와 프록시 객체가 구현한다.
- 프록시 객체 내부에는 원본 객체에 대한 참조가 존재한다.

3. 장점
- 프록시가 대리인이 되어 가능한 처리를 대신한다.
- 실제로 print 할때까지, 무거운 처리(ex:인스턴스 생성)을 지연시킬 수 있다.
- 예를들어, 초기화에 시간이 걸리는 기능이 많이 존재하는 시스템에서
기동 시점에 이용하지 않는 기능까지 전부 초기화한다면 너무 오래걸리게 될 것이다.
프록시 클래스와, 원본 클래스 둘로 나누는 것으로 프로그램의 부품화가 진행되어 개별적으로 기능을 더할 수 있게 된다.
-> 책임을 분리한다.
-> 프록시에서는 접근 제어(캐싱) 기능을 제공하도록!